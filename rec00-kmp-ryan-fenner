"""
Created on Wed Aug 28 14:54:12 2024

@author: ryan fenner
"""

'''In this recitation, you will complete the Knuth-Morris-Pratt string matching algorithm.
I wrote the function compute_table, which tells you how much to shift the gene when a mismatch is found.
You must complete the algorithm by completing the function, kmp.'''

def compute_table(gene):
    '''Expect that gene is a string.
    returns a list of indices. The jth index in the list indicates how many places to move the pattern if a mismatch occurs at position j.
    This is not the most efficient way to do this. This is an O(m^3) algorithm, where m is the length of gene.
    I've written it this way because this is the most direct way to describe how the table is defined.
    A better implementation can run in linear time, O(m).
    '''
    table = []
    for j,g in enumerate(gene):
        shift_when_mismatch_at_j = min([s for s in range(j+1) if gene[:j-s]==gene[s:j] and gene[j]!= gene[j-s]], default = j+1)
        table.append(shift_when_mismatch_at_j)
    return table

def test_compute_table():
    gene = "abcabcacab"
    print(compute_table(gene))
    ideal_answer=  [ j - i +1 for j,i in enumerate([0,1,1,0,1,1,0,5,0,1])] #See Knuth's paper, keep in mind he starts indexing at 1 instead of 0.
    assert compute_table(gene)== ideal_answer
test_compute_table()
#print( compute_table("abcabcacab"))

def kmp(gene, genome):
    M = len(genome)
    N = len(gene)
    
    if N == 0:
        return True
    
    # Create a table for the shifting value
    gene_table = compute_table(gene)
    
    # set indexes to zero
    i = 0  # index for genome
    j = 0  # index for gene

    #beging matching the gene to the genome
    while i < M:
        if gene[j] == genome[i]:
            i += 1
            j += 1
            
            # Once the test has finished matching with no errors
            if j == N:
                return True  # gene must be in genome

        # If there is a mismatch in the data    
        else:
            if j != 0: # makes sure it is not an empty gene
                j = gene_table[j-1]
            else:
                i += 1
    
    return False  # gene not found in genome


def test_kmp():
    genes = ["", "a","t", "att", "cat", "catacatttcat", "ggggaa", "atatatatat", "aaaat", "aaaa"]
    genomes = ["", "a", "catacattaccattacgaccag", "atgcacattatatatatatgcatat", "gggggggaaaaaaaa", "aaa", "taaa"]

    for gene in genes:
        for genome in genomes: #tests every pair of gene and genome.
            # You can uncomment out this to help you debug.
            print("gene, genome", gene, genome)
            print(kmp(gene, genome))
            print(gene in genome)
            assert(kmp(gene, genome) == (gene in genome) ) #asserts that the kmp function returns the same value as the builtin 'in' function.
test_kmp()
